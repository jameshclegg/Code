 GSI Lumonics SC2000 Command Reference P/N 7OM-029Rev BRevision Date: Nov 19, 2001? Copyright 1998-2001 GSI Lumonics, Inc.Author: Fred StewartThe following hyperlinked documents share the same directory:SC2000 User Manual rev2.0.docSC2000 Support Programs Manual rev2.0.docSC2000 Command Reference rev2.0.docNode address correspondence table.doc
Command Reference? Copyright 1998-2001 GSI Lumonics, Inc.ScopeThis command reference refers to:SC2000 firmware Version 2.0CLI.EXE Version 2.0GSI Lumonics SC2000 LabVIEW Driver Library Version 2.0Active X Motion Assembler Component Version 2.00The Command Line Interface (CLI) and the Motion Assembler Component (MAC) incorporate assemblers that translate English language program commands into the binary language of the SC2000.  Each command in defined in the assembly language context and then in the binary context, but note that the SC2000 will only accept commands uploaded in the binary format.StatementsStatements are composed of one command and a variable number of parameters. There are no optional parameters for Scan Controller commands.  Conditional statements actually have two commands per statement and they are an exception.Parameter FormatParameters are either integers or floating point numbers. Parameters are typically transmitted to the Scan Controller as 8 byte command headers, 16 bit integers and 1.15 fixed point numbers although there are some exceptions. All parameters are literal values in a statement and they are separated from each other and from the command text by whitespace. Floating point numbers in an assembly language statement are always written in the standard fixed point format with the decimal point located after the ones position, one or more leading digits and one or more trailing digits. For example, Ô1.3Õ Ô0.6Õ and Ô4.55Õ and Ô6,7Õ are all acceptable floating point numbers. Examples of unacceptable floating point number format are Ô4.9e1Õ Ô.5Õ Ô5.Õ. Certain computer systems may be configured for European local, in which case the acceptable decimal point is the comma character. Integers in an assembly language statement can be written as decimal, character, octal or hexadecimal numbers. Decimal numbers may have a leading Ô+Õ or Ô-Ô sign and 1 or more digits. For example, -45   +23   200   56000 are all acceptable decimal integers. Examples of unacceptable decimal integers include 56,000 and 56.000. Character integers are written as a single printable ASCII character surrounded by single quotes. Examples of acceptable character integers in an assembly language statement are Ô4Õ ÔAÕ and Ô!Õ. Examples of unacceptable character integers are ÔÕÕ and Ô\045Õ. Octal numbers are written with a leading Ô\0Õ followed by the number in base 8. Examples of acceptable octal numbers are \050   \0233   \0456. Hexadecimal numbers are written using the c language style. They have a leading Ô0xÕ followed by the hex digits. Examples of acceptable hex integers are 0x50 0xFFFF.DIGIT			=>	[0-9]OCTAL_DIGIT		=>	[0-7]HEX_DIGIT		=>	[0-9a-fA_F]DECIMAL_INTEGER	=>	[+-]*[0-9]+OCTAL_INTEGER	=>	[\][0][0-7]+HEX_INTEGER		=>	[0][xX][0-9afAF]+CHAR_INTEGER	=>	[Ô][0-9a-zA-Z][Õ]FLOAT			=>	[0-9]+[\.\,][0-9]+ 
Explanation of Operational ModesOverview:	There are various modes of operation that overlap or are mutually exclusive depending upon those compared. Raster Mode:	A fundamental operating mode for either programs or immediate instructions in which all motion commands are directed to a specified axis.Vector Mode:	A fundamental operating mode for either programs or immediate instructions where motion commands are simultaneously directed to both the X and Y axis.Program Instruction Mode:	When a program is running the operational context of the instructions of the program will be Program Instruction Mode. In contrast, query commands and the system configuration commands cannot be executed from a program, i.e. they are not valid in Program Instruction Mode.Immediate Instruction mode:	This is the idle mode of the Scan Controller, when a program is not running. Typically, every command can be executed from this mode except those that deal exclusively with the operation of programs, i.e. Repeat, Nrepeat, End, and ExecuteSerialNumber.Dual Single Axis:     	This mode is only available when the ExecuteRasterPgm command is executed.  This mode is characterized by two raster programs running concurrently, one on each axis.Concurrent Instruction mode:	This mode comes about when a program is running and you try to enter a command over the communications interface. Typically, commands valid for this mode are the query commands, AbortPgm and ExitPGM.
AssemblyBinary?FreeFlashSpace?FreeRAMSpace?ID?OpticalCal?Position?Status?Sync?Temp?TempOKAbortPgmComConfigCreateFlashPgmCreatePgmDelayedLaserGateDelayedSetFPSDelayedSetOutputSignalDelayedSetSyncDelayedUnSetSyncDeltaPositionDeltaPositionXYDeltaSlewDeltaSlewXYDeltaTweakAxisDeltaTweakAxisXYDisableEnableEndExecutePgmExecuteRasterPgmExecBinPgmExecSerialNumberExitPgmFlipExchangeAxisIfexecutepgmIfexecuterasterpgmIftempokexecutepgmIftempokexecuterasterpgmLaserGateLaserModeSetupNrepeatPackMemoryPositionPositionXYRasterReleasePgmRepeatSaveConfigInFlashSerialNumberSetupSetAnalogOutputSetConfigVarSetFPSSetGSSSetLaserPowerSetMOFGainsSetMOFModeSetMOFShiftSetOutputSignalSetPWMSetSetSyncDelaySetSyncSetTicklePulsesSetUnsetSyncDelaySetXPRGainSetXPROffsetSetYPRGainSetYPROffsetSlewSlewXYTransformAxisTweakAxisTweakAxisXYUnSetSyncVectorWaitWaitMOFDistanceWaitPositionWaitPositionXYWaitSync?FreeFlashSpace?FreeRAMSpace?ID?OpticalCal?Position?Status?Sync?Temp?TempOKAbortPgmComConfigCreateFlashPgmCreatePgmDelayedLaserGateDelayedSetFPSDelayedSetOutputSignalDelayedSetSyncDelayedUnSetSyncDeltaPositionDeltaPositionXYDeltaSlewDeltaSlewXYDeltaTweakAxisDeltaTweakAxisXYDisableEnableEndExecutePgmExecuteRasterPgmExecBinPgmExecSerialNumberExitPgmFlipExchangeAxisIfexecutepgmIfexecuterasterpgmIftempokexecutepgmIftempokexecuterasterpgmLaserGateLaserModeSetupNrepeatPackMemoryPositionPositionXYRasterReleasePgmRepeatSaveConfigInFlashSerialNumberSetupSetAnalogOutputSetConfigVarSetFPSSetGSSSetLaserPowerSetMOFGainsSetMOFModeSetMOFShiftSetOutputSignalSetPWMSetSetSyncDelaySetSyncSetTicklePulsesSetUnsetSyncDelaySetXPRGainSetXPROffsetSetYPRGainSetYPROffsetSlewSlewXYTransformAxisTweakAxisTweakAxisXYUnSetSyncVectorWaitWaitMOFDistanceWaitPositionWaitPositionXYWaitSync
?FreeFlashSpaceCommand Description:	Returns byte count of available flash memory.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:(none)Syntax:			?FreeFlashSpaceNote:	The ?FreeFlashSpace command returns the amount of space available (in bytes) in the non-volatile (flash) area of  Scan Controller memory.
?FreeFlashSpaceBinary Interface:		Command Byte:		0x26Parameters:		NoneTick count:		<timing dependent upon Baud rate>Return Count:		4 bytes as (1) big endian doublewordNotes:	 Example:		Ò?FreeFlashSpaceÓ -> 0x26       		(Readback) 0x00060000 -> 393216			393216 byte free	Given 0x 00  01  FF  FE	          1 | 2 | 3 | 4	get the bytes in the order 1 2 3 4
?FreeRAMSpaceCommand Description:	Returns byte count of available SRAM.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:(none)Syntax:			?FreeRAMSpaceNote:	?FreeRAMSpace returns the amount of available space, in bytes, for loading programs into SRAM (volatile) area of the Scan Controller memory. 
?FreeRAMSpaceBinary Interface:		Command Byte: 	0x27Parameters:		NoneTick count:		<timing dependent upon Baud rate>Return Count:		4 bytes as (1) big endian doublewordNotes:Example:		Ò?FreeRAMSpaceÓ -> 0x27       	(readback) 0x0001F000 -> 126976			126976 bytes free			Given 0x 00  01  FF  FE			          1 | 2 | 3 | 4			get the bytes in the order 1 2 3 4
?IDCommand Description:	Return system revision information. Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:(none)Syntax:			?IdNote:	?Id returns the Boot Loader Firmware Version number, the Main Firmware Version number, the Hardware number and the Device ID number. If the firmware version number is 0.0 then the Boot Loader has responded to the ?Id command instead of the main firmware. The Hardware number is typically 2 and the Device ID number is typically 3.
?IDBinary Interface:		Command Byte: 	0x29Parameters:		NoneTick count:		<timing dependent upon Baud rate>Return Count:		6 bytes as 6 bytes		Boot Segment Revision<byte 1> . <byte 2>Firmware Revision (default 1.0)<byte 3> . <byte 4>Hardware (default 0)<byte 5>Device ID (default 0)<byte 6>Notes:Example:		Ò?IdÓ -> 0x29			(readback) 0x010001F10200 -> 1,0,1,241,2,0			Boot Segment Revision 1.0       Firmware Revision: 1.241       Hardware: 2       Device ID: 0
?OpticalCalCommand Description:	Return the contents of the path compensation registers.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:(none)Syntax:			?OpticalCalNote:	Returns the most recently latched readings from the path compensation registers.
?OpticalCalBinary Interface:		Command Byte: 	0x2DParameters:		NoneTick count:		<timing dependent upon Baud rate>Return Count:		64 bytes as (32) big endian wordsChannelX-Axis Output PosY-Axis Output PosX-Axis Read PosY-Axis Read PosX-Axis System GainX-Axis System OffsetY-Axis System GainY-Axis System Offset9Word 1Word 2Word 3Word 4Word 5Word 6Word 7Word 810Word 9Word 10Word 11Word 12Word 13Word 14Word 15Word 1611Word 17 Word 18Word 19Word 20Word 21Word 22Word 23Word 2412Word 25Word 26Word 27Word 28Word 29Word 30Word 31Word 32where Output Position is the most recent value of the position command register at the time of trigger, Read Position is the corrected position readback value at the time of trigger, System Gain is the overall position command gain coefficient at the time of trigger, and System Offset is the overall position command offset constant at the time of trigger. The values are latched into the Scan Controller optical calibration registers by a positive edge trigger on any of  sync channels 9 Ð 12. Optical calibration values can be read by issuing the ?OpticalCal command. Capture and readback can occur in the idle mode or while a program is running, thereby providing a mechanism to know the position, accuracy and correction factor at any given time.Notes:The gain value read back is the integer representation of gain. Use the following formula to convert the integer to floating point gain:  .Notes:The position readback value is derived from the following formula: Where PRead is the position sensor reading reported by ?OpticalCal and ?Position, PRaw is the uncorrected position sensor reading and axis specifies either the X or Y axis.  See SetXPROffset, SetXPRGain, SetYPROffset, SetYPRGain or SetConfigVar.Example:		Ò?OpticalCalÓ -> 0x2D
?PositionCommand Description:	Return the current position on the given axis.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:axis	axis specifies which axisÕ position will be returned.axisAction1X-axis position2Y-axis positionSyntax:			?Position axisNote:	The ?position command is used to read back the current position of the given axis. The value returned is the corrected value of the measured signal of the Galvo position detector.
?PositionBinary Interface:		Command Byte: 	0x2AParameters:		2 bytes as (1) big endian wordTick count:		<timing dependent upon Baud rate>Return Count:		2 bytes as 1 big endian wordNotes:The position readback value is derived from the following formula: Where PRead is the position sensor reading reported by ?OpticalCal and ?Position, PRaw is the uncorrected position sensor reading and axis specifies either the X or Y axis.  See SetXPROffset, SetXPRGain, SetYPROffset, SetYPRGain or SetConfigVar.Example:		Ò?Position 1Ó -> 0x2A0001			(Readback) 0x1388 -> 5000			X-axis position detector reads 5000.
?StatusCommand Description: 	Returns error information and clears error state.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:(none)Syntax:			?StatusNote:	The ?Status command returns the error information described in the Error Processing section of this document. When an error is discovered while a stored program is executing or while commands are being received over the communication link, all subsequent commands are ignored until a ?Status command is issued or the controller is power cycled. If the error occurs while a program is running, the program will continue to run until the ?status command is issued. If the SC2000 is in the error state (LED ON) ?status will return the error code of the command in error, halt any running programs, set the LED to OFF and unlock command processing.  If there is no error, ?status returns the success code of the last command executed. 
?StatusBinary Interface:		Command Byte: 	0xFFParameters:		8 bytes as the fixed value 0xFFFFFFFFFFFFFFFFTick count:		<timing dependent upon Baud rate>Return Count:		6 bytes as (3) big endian wordsFirst word, Error SourcevalueMeaning0Error in interpreted command1-255Error in program command, PGM-ID9999System ErrorSecond word, Command in errorSame as Command Byte definition.Third word, Error codeSee Appendix for Error code definitions.Note:			See Appendix for error codes.Example:		Ò?StatusÓ -> 0xFFFFFFFFFFFFFFFFFF			(readback) 0x000000FF0000 Ð> 0, 255, 0			0   -> report from interpreted mode			255 -> Ô?statusÕ reporting (last command executed) 			0   -> ?status returned success			
?SyncCommand Description:	Returns the logic state of the sync and SAX pins as bits in a word.   Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYES		Parameters:(none)Syntax:		?Sync   
?SyncBinary Interface:		Command Byte: 	0x39Parameters:		NoneTick count:		<timing dependent upon Baud rate>Return Count:	2 bytes as 1 big endian wordNote:		X Servo Ready, Y Servo Ready, and Syncs 1-4 are inverted logic.Note:		See the following table for return value bit designations.Bit position1514131211109876543210SaxSync #XrdYrd1413121110987654321Example:		Ò?SyncÓ -> 0x39(readback) 0x6F Ð> sync 6 and sync 7 asserted, X servo ready and Y servo ready asserted. 
?TempCommand Description:	Read servo temperature.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:(none)Syntax:			?Temp
?TempBinary Interface:		Command Byte: 	0x2BParameters:		NoneTick count:		<timing dependent upon Baud rate>Return Count:		8 bytes as (4) big endian wordsword 1X-axis servo temperature (J7)word 2X-axis alternate servo temperatureword 3Y-axis servo temperature (J6)word 4Y-axis alternate servo temperatureNotes:Readings are in counts of 4096, 0 Ð 5V.Example:		Ò?TempÓ -> 0x2B
?TempOKCommand Description:	Check temperature of the given device.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:device_id	The device_id specifies from which SAX device to read the temperature. device_idAction1X-axis temperature flag2Y-axis temperature flag3The logical AND of X and Y temperature flagsSyntax:			?TempOK device_id
?TempOKBinary Interface:		Command Byte: 	0x2CParameter :		2 bytes as (1) big endian wordTick count:		<timing dependent upon Baud rate>Return Count:		2 bytes as (1) big endian word0 = FALSE (device temperature not OK)1 = TRUE (device temperature OK)Notes:When device = 3, the result is the Boolean AND of device 1 and device 2.Example:		Ò?TempOK 1Ó -> 0x2C0001
AbortPgmCommand Description:	Halts the currently running program and disables servos.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESYESParameters:(none)Syntax:			AbortPgmNote:	AbortPgm will stop all running programs immediately and disable both servos.  
AbortPgmBinary Interface:		Command Byte: 	0x20Parameters:		NoneTick count:		0Return Count:		0Notes:Example:		ÒAbortPgmÓ -> 0x20
ComConfigCommand Description:	Configure RS-232 serial port parameters for communication.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESYESParameters:baud_rate	baud_rate specifies the speed at which serial communications takes place. See the following table for the baud_rate specifier and the associated baud rate.baud_rateBaud Rate Setting124002480039600419,200538,400657,6007115,200data_bits	data_bits specifies the number of data bits to use when communicating over the serial interface.    This value is always 8.stop_bits	stop_bits specifies the number of stop bits to use for an RS-232 byte transmission.stop_bits Stop Bit Setting1One stop bit2Two stop bits parity	parity specifies the type of parity to use for RS-232 communications.parityParity Setting0No parity1Odd parity2Even parity
interface	Interface specifies the type of serial communications interface to use when communicating with the Scan Controller.This value is always 232, use RS 232 interface       Syntax:			ComConfig baud_rate data_bits stop_bits parity interfaceNote:	The Scan Controller RS-232 UART is initialized at power-on for 2400 baud, 8 data bits, 1 stop bit, and no parity. Use ComConfig to change those settings. Hardware CTS/RTS handshaking is used exclusively.
ComConfigBinary Interface:		Command Byte: 	0x23Parameters:		10 bytes as (5) big endian wordsTick count:		0Return Count:		0Notes:Example:		ÒComConfig 4 8 1 0 232Ó -> 0x23000400080001000000E8
CreateFlashPgmCommand Description:	The action of Create Flash Program is to initiate the storage mechanism in the Scan Controller so that a program may be saved to non-volatile memory on-board the Scan Controller.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:program_type	program_type identifies the type of program to be saved.program_typeAction0This is a Raster program1This is a Vector programprogram_id	program_id is the identification code or program name for the new flash program. The program_id is a number in the range 1Ð254.Syntax:			CreateFlashPgm program_type program_idExample:	CreateFlashPgm 1 ÕaÕNote:	Place CreateFlashPgm with a program type and a program id that you choose as the first statement in a group of commands that you wish to permanently store on the Scan Controller. All commands sent down to the Scan Controller will be saved in flash memory until the End command is encountered. The point of execution will pass to these commands when called with ExecutePGM or ExecuteRasterPgm.Note:	Programs placed in flash memory will remain available even after the Scan Controller is power cycled. Program Id 1 has a special purpose; commands saved with program id 1 will automatically execute when the Scan Controller is powered up.Note:	If Error Code not equal to zero, commands will not be saved. Please reclaim Flash space by power cycling the Scan Controller.
CreateFlashPgmBinary Interface:		Command Byte: 	0x1EParameters:		4 bytes as (2) big endian wordsTick count:		<timing dependent upon Baud rate>Return Count:		0Note:	Flash programs cannot be uploaded while a program is running.Note:	If CreateFlashPgm is executed with a program Id that already identifies a Flash program, the previous program will be marked for reclamation. Reclamation marking can also be forced by executing the ReleasePGM command. Space marked for reclamation will become available for new programs when the Scan Controller is power cycled. Example:		ÒCreateFlashPgm 1 100Ó -> 0x1E00010065
CreatePgmCommand Description:	Store a Scan Controller program in volatile memory on-board the Scan Controller.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESYESParameters:program_type	program_type identifies the type of program to be saved. program_typeAction0This is a Raster program1This is a Vector programprogram_id	program_id is the identification code or program name for the new SRAM program. The Program ID is a number in the range 1Ð254.Syntax:			CreatePgm program_type Program_idNote:	CreatePgm is the first statement in a program that you wish to store in the SRAM portion of the Scan Controller memory. Programs stored in this area will be lost after a power cycle. CreatePgm initiates a special ÔtransferÕ mode where commands sent after the CreatPgm statement are stored in SRAM rather the executing immediately. The special ÔtransferÕ mode is terminated by the end statement. Note:	Programs stored in the SRAM area of the Scan Controller can be transferred from the host to the Scan Controller while another program is executing motion commands. This operation is undefined if you transfer a new program with the same name as the one being transferred. Note:	If Error Code is not equal to zero, commands will not  be saved.
CreatePgmBinary Interface:		Command Byte: 	0x21Parameters:		4 bytes as (2) big endian wordsTick count:		<timing dependent upon Baud rate>Return Count:		0Notes:Note:	If CreatePgm is called with a program Id that already identifies a SRAM program, the previous SRAM program will be marked for reclamation.  Reclamation marking can also be forced by executing the ReleasePGM command. Space marked for reclamation will become available for new programs by executing the PackMemory command or power cycling the Scan Controller. Note:	If a new program is uploaded with the same program ID as an existing Flash program, the program ID will reference the SRAM program until the Scan Controller is power cycled, after which the program ID will reference the Flash program once again.Example:		ÒCreatePgm 1 0xDEÓ -> 0x21000100DE
DelayedLaserGateCommand Description:	The DelayedLaserGate command is used to turn the laser on and off via the Laser Interface board. The mode parameter specifies the ON or OFF condition. The count parameter specifies a sub-tick delay as a multiple of 240nS counts. Execution of the command is deferred SetSetsyncDelay number of ticks after the command is encountered in a program.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:count			Sub-tick count micro-delay, one count equals 240nS.				mode	Laser mode, on or off.modeAction0Laser OFF1Laser ONNote:	This command works with the Laser Interface Board.Note:	This is the delayed version of the LaserGate command. When the point of execution of the program reaches this command it is queued up for execution SetSetsyncDelay number of clock ticks (23.5uS instruction clock) later; the point of execution then moves on to the next instruction in the program. After the  delay the instruction will wait a further count number of 240nS clock ticks and then turn the laser either ON or OFF.Syntax:	DelayedLaserGate count mode
DelayedLaserGateBinary Interface:		Command Byte: 	0x49Parameters:		4 bytes as (2) big endian wordsTick count:		0Return Count:		0Notes:			Example:		ÒDelayedLaserGate 55 1Ó -> 0x4900370001
DelayedSetFPSCommand Description:	Trigger First Pulse Suppression in the Laser Interface Board after a delay.  This is the delayed version of the SetFPS command.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:count			Sub-tick count micro-delay, one count equals 240nS.			Note:	This command works with the Laser Interface Board.Note:	This is the delayed version of the SetFPS command. When the point of execution of the program reaches this command it is queued up for execution SetSetsyncDelay number of clock ticks (23.5us instruction clock) later; the point of execution then moves on to the next instruction in the program. After the  delay the instruction will wait a further count number of 240ns clock ticks and then assert the FPS line on the Laser Interface Board according to the FPS configuration specified in a previously issued LaserModeSetup command.Note:	This command will assert the FPS signal of the laser board. If the FM parameter of  the LaserModeSetup command equals 0 then the FPS signal will be a short pulse of about 1 us. If FM = 1 then the FPS signal will remain asserted (extended) until the first, second, third or fourth pulse of the PWM signal, after which it is automatically unasserted. Syntax:	DelayedSetFPS count
DelayedSetFPSBinary Interface:		Command Byte: 	0x4BParameters:		Two bytes as (1) big endian word.Tick count:		0Return Count:		0Notes:Example:		ÒDelayedSetFPS 45Ó -> 0x4B002D
DelayedSetOutputSignalCommand Description:	Turn certain Laser Interface Board output signals ON and OFF. The execution of the command is delayed SetSetsyncDelay number of ticks after the command is encountered in the program.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:select	Select the output signal of the Laser Interface Board to control.	selectSignal Name1REMOTE_EXECUTE 2MARK_ERROR.3MARK_ IN_PROGRESS.4SHUTTERstate	The signal state, either ON or OFF.stateAction0OFF1ONNote:	This command works with the Laser Interface Board.Note:	This is the delayed version of the SetOutputSignal command. When the point of execution of the program reaches this command it is queued up for execution SetSetsyncDelay number of clock ticks (23.5uS instruction clock) later; the point of execution then moves on to the next instruction in the program. After the delay the instruction will either set or reset the specified output signal on the Laser Interface Board.Syntax:	DelayedSetOutputSignal select state
DelayedSetOutputSignalBinary Interface:		Command Byte: 	0x47Parameters:		4 bytes as (2) big endian wordsTick count:		1Return Count:		0Notes:Example:	ÒDelayedSetOutputSignal 3 1Ó -> 0x4700030001
DelayedSetSyncCommand Description:	Sets the sync bit for the specified channel after the configured delay (see SetConfigVar).Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:channel_mask	channel_mask specifies which one of the writable sync channels is to be set. channel_maskAction1Sync Channel 1 (J4, pin 1 pulls low)2Sync Channel 2 (J4, pin 2 pulls low)3Sync Channel 3 (J4, pin 3 pulls low)4Sync Channel 4 (J4, pin 4 pulls low)Note:	The number of tick counts that DelayedSetSync waits before setting the named channel is a global variable set by the SetConfigVar command or the SetSetSyncDelay command.  Syntax:			DelayedSetSync channel_mask
DelayedSetSync Binary Interface:		Command Byte: 	0x36Parameters:		2 bytes as (1) big endian signed word.Tick count:		0Return Count:		0Notes:Example:		ÒDelayedSetSync 4Ó -> 0x360004
DelayedUnSetSyncCommand Description:	Resets the sync bit for the specified channel after the configured delay (see SetConfigVar).Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:channel_mask	channel_mask specifies which one of the writable sync channels is to be reset. Valid numbers for channel_mask are 1, 2, 3, 4.channel_maskAction1Sync Channel 1 (J4, pin 1 high impedance)2Sync Channel 2 (J4, pin 2 high impedance)3Sync Channel 3 (J4, pin 3 high impedance)4Sync Channel 4 (J4, pin 4 high impedance)Note:	The number of tick counts that DelayedUnsetSync waits before setting the named channel is a global variable set by the SetConfigVar command or the SetSetSyncDelay command.Syntax:			DelayedUnsetSync channel_mask
DelayedUnsetSyncBinary Interface:		Command Byte: 	0x37Parameters:		2 bytes as (1) big endian signed word.Tick count:		0Return Count:		0Notes:Example:		ÒDelayedUnsetSync 4Ó -> 0x370004
DeltaPositionCommand Description:	Set the position of the current axis relative to the current position.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESNOYESYESYESNOParameters:offset	offset specifies a new position relative to the current value of the position command register. The current run-time axis is referenced for position command register value.  offset has units of DAC counts.Syntax:			DeltaPosition device_id
DeltaPositionBinary Interface:		Command Byte: 	0x03Parameter :		2 bytes as (1) big endian signed word	Tick count:		1Return Count:		0Notes:Example:		ÒDeltaPosition 550Ó -> 0x030226
DeltaPositionXYCommand Description:	Set the vector position relative to the current position.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESNOParameters:x-offset	x-offset specifies a position relative to the current value of the X-axis position command register. x-offset has units of DAC counts.y-offset	y-offset specifies a position relative to the current value of the Y-axis position command register. y-offset has units of DAC counts.       Syntax:			DeltaPositionXY x-offset y-offset
DeltaPositionXYBinary Interface:		Command Byte: 	0x04Parameters:		4 bytes as (2) big endian signed words.Tick count:		1Return Count:		0Notes:Example:		ÒDeltaPositionXY 500 Ð600Ó -> 0x0401F4FDA8
DeltaSlewCommand Description:	Move smoothly on the current axis relative to the current position.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESNOYESYESYESNOParameters:offset	offset specifies the distance along the current axis to smoothly move from the current value of the position command register of the specified axis over count ticks. offset has units of DAC counts.count	count specifies the number of 23 ?S ticks in which to smoothly move in a straight line.Syntax:			DeltaSlew offset count
DeltaSlewBinary Interface:		Command Byte: 	0x07Parameters:		4 bytes as (1) big endian signed word and (1) big endian unsigned word.Tick count:		Value of countReturn Count:		0Notes:Example:		ÒDeltaSlew 4000 31000Ó -> 0x070FA07918
DeltaSlewXYCommand Description:	Move smoothly relative to the current vector position.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESNOParameters:x-offset	x-offset specifies the distance along the X-axis to smoothly move from the current value of the X-axis position command register over count ticks. x-offset has units of DAC counts.y-offset	y-offset specifies the distance along the Y-axis to smoothly move from the current value of the Y-axis position command register over the count ticks. y-offset has units of DAC counts.count	Count specifies the number of 23 ?S ticks in which to smoothly move in a straight line. Syntax:			DeltaSlewXY x-offset y-offset count
DeltaSlewXYBinary Interface:		Command Byte: 	0x08Parameters:		6 bytes as (2) big endian signed words and (1) big endian unsigned word.Tick count:		Value of countReturn Count:		0Notes:Example:		ÒDeltaSlewXY 230 Ð450 600Ó -> 0x0800E6FE3E0258
DeltaTweakAxisCommand Description:	Apply gain and offset deltas to subsequent raster operations.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESNOYESYESYESYESParameters:gain_factor	The gain_factor is multiplied by the current axis current composite gain factor to produce a new composite gain factor.offset-delta	The offset-delta is added to the current axis current composite offset to produce the new current axis composite offset. offset-delta has units of DAC counts.Syntax:			DeltaTweakAxis gain_factor offset-delta
DeltaTweakAxisBinary Interface:		Command Byte: 	0x17Parameters:		4 bytes as (1) big endian unsigned word and (1) big endian signed word.Tick count:		1Return Count:		0Notes:gain is converted from a float to an integer by the following formula: Example:		ÒDeltaTweakAxis 1.0 10000Ó -> 0x1780002710
DeltaTweakAxisXYCommand Description:	Apply gain and offset deltas to subsequent vector operations.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESYESParameters:x-gain_factor	The x-gain_factor is multiplied by the current composite X-axis gain factor to produce a new composite X-axis gain factor.x-offset-delta	The x-offset_delta is added to the current X-axis offset to produce the new X-axis offset. x-offset-delta has units of DAC counts.y-gain_factor	The y-gain_factor is multiplied by the current composite Y-axis gain factor to produce a new composite Y-axis gain factor.y-offset -delta	The y-offset _delta is added to the current Y-axis offset to produce the new Y-axis offset. y-offset-delta has units of DAC counts.Syntax:	DeltaTweakAxisXY x-gain_f x-offset-d y-gain_f y-offset-d 
DeltaTweakAxisXYBinary Interface:		Command Byte: 	0x18Parameters:	8 bytes as (1) big endian unsigned word, (1) big endian signed word, (1) big endian unsigned word, and (1) big endian signed word.Tick count:		1Return Count:		0Notes:gain is converted from a float to an integer by the following formula: Example:		ÒDeltaTweakAxisXY 0.8 Ð200 1.02 10Ó -> 0x186666FF38828F000A
DisableCommand Description:	The disable command will disable the specified SAXes connected to the Scan Controller. Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:device_id	device_id specifies that either or both of the SAX servos are to be disabled.Device_idAction1X-axis servo2Y-axis servo3Both servosSyntax:			Disable device_id
DisableBinary Interface:		Command Byte: 	0x15Parameter:		2 bytes as (1) big endian signed word.Tick count:		1Return Count:		0Notes:Example:		ÒDisable 1Ó -> 0x150001
EnableCommand Description:	The Enable command will enable the specified SAXes connected to the Scan Controller.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:device_id	The device_id specifies that either or both of the SAX servos are to be enabled. device_idAction1X-axis servo2Y-axis servo3Both servosSyntax:			Enable device_id
EnableBinary Interface:		Command Byte: 	0x14Parameter:		2 bytes as (1) big endian signed wordTick count:		1Return Count:		0Notes:Example:		ÒEnable 1Ó -> 0x140001
EndCommand Description:	Marks the end of a Scan Controller program.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESNOYESParameters:(none)Syntax:			EndNote:	The End command marks the end of a program that is to be stored in a memory area of the Scan Controller. The End command takes the Scan Controller out of ÔtransferÕ mode such that motion commands are executed immediately if the Scan Controller is in idle mode.
EndBinary Interface:		Command Byte: 	0x16Parameters:		4 bytes as (1) unsigned little endian long wordTick count:		<timing dependent upon Baud rate>Return Count:		0Notes:	CRC values are computed using the CRC32 algorithm. A sample C language program that computes the CRC checksum of a ASCII hex program is shown in the appendix (see Error! Reference source not found. at the end of the document). A default CRC value of 0xFFFFFFFF can be used to upload a program without the benefit of CRC checking. If CRC checking is required, please note that the ÔcreatepgmÔ statement and the ÔendÕ statement (first and last lines) are not included in the CRC checksum computation.Example:		ÒEndÓ -> 0x16FFFFFFFF
ExecBinPgmCommand Description:	Commence operation of binning at a particular program ID offset. This allows external input signals to control which program executes on the SC2000.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:pgm_offset	pgm_offset is a number in the range 1Ð254. Note:	This command works with the Laser Interface Board.Note:	This command provides an interface to the binning input pins of the Laser Interface Board. When this command executes the SC2000 firmware reads the value of the six binning input lines and converts this number to a binary value. This number is then added to the pgm-offset parameter of the command to form the effective program ID to execute. Syntax:			ExecBinPgm pgm_offset
ExecBinPgmBinary Interface:		Command Byte: 	0x4CParameters:		2 bytes as (1) big endian wordTick count:		less than 3Return Count:		0Notes:Example:		ÒExecBinPgm 57Ó -> 0x4C0039
ExecSerialNumberCommand Description:	Cause the current serial number to be marked and then to increment the serial number register.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESNONOParameters:(none)Note:	The serial number needs to be setup properly before this command will work; please see the command SerialNumberSetup. Note:	In typical operation, especially with the Command Line Interface, the individual number programs consists of relative coordinate motion commands (deltaslewxy and deltapositionxy).  The graphic of each number is defined in a bounding box, the start and end coordinates of a number program are always in the same place relative to the bounding box, the start position being at the center left side and the end being at the center right side; thus it is possible to execute program in sequence and have drawn a multi-digit number with proper kerning and alignment. Before the first number of the serial number is drawn the laser must be positioned to the center left of the first cell, use either absolute or relative positioning commands to do this.  When marking of the serial number is complete the laser will be positioned at the center right side of the bounding box of the last character in the number. Internal to the SC2000, the serial number register will be incremented by one.Syntax:			ExecSerialNumber
ExecSerialNumberBinary Interface:		Command Byte: 	0x40Parameters:		0Tick count:		depends on serial number formatReturn Count:		0Notes:Example:		ÒExecSerialNumberÓ -> 0x40
ExecutePgmCommand Description:	Commence the execution of the named program.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYES*YES*YES*YES*YES*NOParameters:program_id	program_id is the identification code or program name of the  program that is to be deleted. The program_id is a number in the range 1Ð254.Syntax:			ExecutePgm program_idNote:			program_id must identify a vector command file if:* ExecutePgm is issued by the user following a VECTOR command.* ExecutePgm is called from a vector command file.program_id must identify a raster command file if:* ExecutePgm is issued by the user following a RASTER <axis> command.* ExecutePgm is called from a raster command file.ExecutePgm starts executing a function/program stored on the embedded controller.The user provides a program id when the code is stored on the embedded controller using CreateFlashPgm or CreatePgm to identify Functions/programs. This id is then used with ExecutePgm to invoke the stored code. Program Ids assigned to programs stored in either flash or RAM range from 1 to 254. If ExecutePgm is called with a program id that is out of range or that has no code previously stored, then an error will be generated and nothing gets executed. If another program is currently running an error will be returned. Also an error is generated if ExecutePgm is called with a pgm id that doesnÕt obey the rules for pgm id stated above.
ExecutePgmBinary Interface:		Command Byte: 	0x0EParameters:		2 bytes as (1) big endian signed word.Tick count:		less than 3Return Count:		0Notes:Example:		ÒExecutePgm 0x45Ó -> 0x0E0045
ExecuteRasterPgmCommand Description:	Enter Dual Single Axis mode and commence the execution of the named raster programs.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESNOParameters:x_pgm_id	x_pgm_id is the identification code or program name for the raster program that will run on the X-axis. x_pgm_id is a number in the range 1Ð254.y_pgm_id	y_pgm_id is the identification code or program name for the raster program that will run on the Y-axis. y_pgm_id is a number in the range 1Ð254.Syntax:			ExecuteRasterPgm x_pgm_id y_pgm_idNote:	To start two independent operations for raster operation, call ExecuteRasterPgm with two arguments, a program id for the x-axis and a program id for the y-axis.Program IDs range from 1 to 254. If ExecuteRasterPgm is called with a program id that is out of the acceptable range or if the given program ID has no code associated with it, an error will be generated and nothing gets executed. If another program is currently running an error will be returned. 
ExecuteRasterPgmBinary Interface:		Command Byte: 	0x0FParameters:		4 bytes as (2) big endian signed words.Tick count:		less than 3Return Count:		0Notes:Example:		ÒExecuteRasterPgm 234 235Ó -> 0x0F00EA00EB
ExitPgmCommand Description:	Use ExitPgm to terminate programs by having them fall through  repeat and waitsync [1-4] statements.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESYESParameters:(none)Syntax:			ExitPgmNote:	When ExitPgm is used to terminate a program there may be a delay before the program finally stops. Termination of the program can be determined over the communications link by issuing the ?Status command. ?Status will report back ExitPgm Success (000000250000) when the program finally terminates. Note:	When ExitPgm is issued while a program is not running and then ?Status is entered next, the command field in the status report will not be set to ExitPgm but rather the last command executed befoe the ExitPgm command. Note:	ExitPGM works by suppressing the iteration property of the Repeat statement and the pause for synchronization property of the WaitSync[1-4] statement. Note that only sync channels 1-4 are suppressed; if ExitPGM is applied to a program that is waiting on a sync channel in the range 5-12, the external stimulus will have to be applied to the channel or the AbortPGM command will have to be used.
ExitPgmBinary Interface:		Command Byte: 	0x25Parameters:		NoneTick count:		dependent upon the program call depth and program structureReturn Count:		0Notes:Example:		ÒExitPgmÓ -> 0x25
FlipExchangeAxisCommand Description:	Use FlipExchangeAxis to reverse the sense of one or both axis and to interchange the command stream between X and Y.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNOYESYESNOParameters:flipX	If  then change the sense of the X-axis (multiply all X-axis positioning commands by Ð1.0).  If then retain default axis sense for X-axis.flipY	If  then change the sense of the Y-axis (multiply all Y-axis positioning commands by Ð1.0).  If then retain default axis sense for Y-axis.exchangeXY	If  then interchange positioning commands for the X and Y axis.  If then retain default axis assignment.Syntax:			FlipExchangeAxis flipX flipY exchangeXY
FlipExchangeAxisBinary Interface:		Command Byte: 	0x3EParameters:		6 bytes as  3 big endian words.Tick count:		1Return Count:		0Notes:Example:		ÒFlipExchangeAxis 1 1 1Ó -> 0x3E000100010001
IfCommand Description:	Execute an instruction if a sync Channel is set.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYES*YESYES*YESYESNOParameters:sync_channel	sync_channel specifies which one of the readable sync channels shall be used in the If command. Valid numbers for sync_channel are 1 Ð 12.Syntax 1:		If sync_channel ExecuteRasterPgm x_pgm_id y_pgm_idSyntax 2:		If sync_channel ExecutePgm program_idExample:		If 5 ExecutePgm ÕaÕExample:		If 12 ExecuteRasterPgm 5 45Note: 	The If statement is a special idiom of the Scan Controller language in that two commands are written in one statement. The command to be executed as the consequent of the if statement is constrained to be either ExecutePgm or ExecuteRasterPgm.Note: 	The If  <channel> ExecuteRasterPgm statement can only be issued from a vector program or from the command line.
IfBinary Interface:		Command Byte: 	0x0A for If <chan> ExecutePGM, 0x0B for If <chan> ExecuteRasterPgmParameters:	* 2 bytes as 1 big endian signed word for ExecutePgm.* 4 bytes as 2 big endian signed words for ExecuteRasterPgm.Tick count:		less than 3Return Count:		0Notes:Example:		ÒIf 7 ExecutePgm 0x45Ó -> 0x0A00070045Example:		ÒIf 7 ExecuteRasterPgm 7 7Ó -> 0x0B000700070007
If TempOKCommand Description:	Execute an instruction if a device temperature is acceptable.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYES*YESYES*YESYESNOParameters:device_id	The device_id specifies from which SAX device to read the temperature.device_idAction1X-axis temperature flag2Y-axis temperature flag3The logical AND of X and Y temperature flagsSyntax 1:		If TempOK device_id ExecuteRasterPgm x_pgm_id y_pgm_idSyntax 2:		If TempOK device_id ExecutePgm program_idExample:		If TempOK 3 ExecuteRasterPgm ÕaÕ ÕdÕExample:		If TempOK 1 ExecutePgm 45Note: 	The If TempOK statement is a special idiom of the Scan Controller language in that two commands are written in one statement. The command to be executed as the consequent of the if statement is constrained to be either ExecutePgm or ExecuteRasterPgm.Note: 	The If TempOK <device> ExecuteRasterPgm statement can only be issued from a vector program or from the command line.
If TempOKBinary Interface:		Command Byte: 	0x0C for If  TempOK <device> ExecutePGM, 0x0D for If  TempOK <device> ExecuteRasterPgmParameters:	* 2 bytes as (1) big endian signed word for ExecutePGM.* 4 bytes as (2) big endian signed words for ExecuteRasterPgm.Tick count:		less than 3Return Count:		0Notes:Example:		ÒIf TempOK 2 ExecutePgm 5Ó -> 0x0C00020005Example:		ÒIf TempOK 2 ExecuteRasterPgm 56 57Ó -> 0x0D000200380039
LaserGateCommand Description:	The LaserGate command is used to turn the laser ON and OFF by gating the output of the PWM output pin on the Laser Interface Board. There is an option of adding a sub-tick delay to the laser control signal for precise timing control.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:count			Sub-tick count micro-delay, one count equals 240nS.				mode	Laser mode, on or off.modeAction0Laser OFF1Laser ONNote:	This command works with the Laser Interface Board.Note:	The command will wait count number of 240nS clock ticks and then turn the laser either ON or OFF, turning the PWM output either ON or OFF.Syntax:	LaserGate count mode
LaserGateBinary Interface:		Command Byte: 	0x48Parameters:		4 bytes as (2) big endian wordsTick count:		0Return Count:		0Notes:			Example:		ÒLaserGate 127 1Ó -> 48007F0001
LaserModeSetupCommand Description:	The LaserModeSetup command is used to configure the operation of the Laser Interface Board output signals in relation to the LaserGate, DelayedLaserGate, SetFPS and DelayedSetFPS commands. Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:tkl	enable/disable the tickle pulses.tklMode0disable tickle pulses1enable tickle pulsesinv	invert the PWM output signal.invMode0normal PWM signal1inverted PWM signalfpsm	select First Pulse Suppression modefpsmMode0Single Pulse mode: A single 1 ?Sec pulse issue by SetFPS command.1Extension Mode: FPS signal is asserted by SetFPS command up until the PWM signal is gated ON. Extension into the PWM pulse train is programmable (see fpsx below).fpsx	When First Pulse Suppression is in extension mode (see fpsm above) this parameter selects an additional extension into the PWM pulse train. fpsxMode0extend FPS signal to rising edge of first PWM pulse1extend FPS signal to rising edge of second PWM pulse2extend FPS signal to rising edge of third PWM pulse3extend FPS signal to rising edge of fourth PWM pulseinvfps	invert the FPS output signal.invMode0normal FPS signal1inverted FPS signalgmode	gmode selects between two types of gating of the PWM output signal. Currently not used, value always 0gmodeMode0The LaserGate and DelayedLaserGate commands will switch the PWM output of the Laser Interface Board between PWM modulation and tickle pulses.1The LaserGate and DelayedLaserGate ON commands will cause the PWM output of the Laser Interface Board to output a fixed number of modulation pulses. This number is specified in the Gate_Count_RegisterNote:	This command works with the Laser Interface Board.Syntax:	LaserModeSetup tkl inv fpsm fpsx invfps gmode
LaserModeSetupBinary Interface:		Command Byte: 	0x42Parameters:		6 bytes as (6) bytesTick count:		1Return Count:		0Notes:			Example:	ÒLaserModeSetup 0 0 1 3 0 0Ó -> 0x42000001030000
NRepeatCommand Description:	The NRepeat command will cause the Scan Controller program flow to return to the first instruction in the program where execution is repeated a given number of times.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESNONOParameters:repeat_count	repeat_count specifies the number of times NRepeat will return to the first instruction before fall through to the next instruction.Syntax:			Nrepeat repeat_count Note:	A repeat_count of zero will cause the command to act in the same manner as the repeat instruction. Note:	A given program can contain only one NRepeat command but a program that uses NRepeat may call other programs that use NRepeat. Note:	NRepeat differs from the Repeat instruction in that additional commands may follow the NRepeat statement. 
NRepeatBinary Interface:		Command Byte: 	0x38Parameters:		2 bytes as (1) big endian signed word.Tick count:		0Return Count:		0Notes:			Example:		ÒNrepeat 12Ó -> 0x38000C
PackMemoryCommand Description:	Reclaim memory from deleted programs and previous program versions and then compact available memory.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:(none)Syntax:			PackMemoryNote:	PackMemory will reclaim fragmented space in SRAM memory. This operation is automatically performed each time the system powers up as the SRAM is volatile memory. Memory fragmentation will occur when 1) a new program is uploaded with the same name as an existing program or 2) the ReleasePGM command is run on a given program ID. Note:	Flash memory is packed by issuing the ReleasePGM on the given program and then power-cycling the Scan Controller.
PackMemoryBinary Interface:		Command Byte: 	0x1FParameters:		NoneTick count:		<dependent upon memory fragmentation>Return Count:		0Notes:Example: 		ÒPackMemoryÓ -> 0x1F
PositionCommand Description:	Set the absolute position of the current axis.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESNOYESYESYESNOParameters:coord	Set the absolute position on the current axis to coord. coord has units of DAC counts.Syntax:			Position coordNote:	The position command can generate large servo motions faster than the mechanical system response. Please use position commands with care.
PositionBinary Interface:		Command Byte: 	0x01Parameters:		2 bytes as (1) big endian signed word.Tick count:		1Return Count:		0Notes:Example:		ÒPosition 300Ó -> 0x01012C
PositionXYCommand Description:	Set the absolute vector position.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESNOParameters:x-coord	Set the absolute position of the X-axis to x-coord. x-coord has units of DAC counts.y-coord	Set the absolute position of the Y-axis to y-coord. y-coord has units of DAC counts.Syntax:			PositionXY x-coord y-coord
PositionXYBinary Interface:		Command Byte: 	0x02Parameters:		4 bytes as (2) big endian signed words.Tick count:		1Return Count:		0Notes:Example:		ÒPositionXY 5000 4000Ó -> 0x0213880FA0
RasterCommand Description:	Declare the target axis for subsequent single axis (raster) commands and place the Scan Controller in raster mode.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:axis	Specifies the axis on which subsequent motion command will operate. axis is a number defined as follows: axisAction1X-axis2Y-axisSyntax:			Raster axis
RasterBinary Interface:		Command Byte: 	0x19Parameters:		2 bytes as (1) big endian signed wordTick count:		1Return Count:		0Notes:Example:		ÒRaster 1Ó -> 0x190001
ReleasePgmCommand Description:	Mark the named program as deleted.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESYESParameters:program_id	program_id is the identification code or program name of the  program that is to be deleted. The program_id is a number in the range 1Ð255.Syntax:			ReleasePgm program_idNote:	The action of ReleasePgm is to mark a program as available for reclamation in order to recover memory for other programs. In the case of SRAM memory the PackMemory command may be issued for memory compaction. In the case of Flash Memory, the Scan Controller must be power cycled for Flash Memory compaction.
ReleasePgmBinary Interface:		Command Byte: 	0x22Parameters:		2 bytes as (1) big endian signed word.Tick count:		1Return Count:		0Notes:Example:		ÒReleasePgm ÕaÕÓ -> 0x220061
RepeatCommand Description:	The Repeat command will cause the Scan Controller program flow to return to the first instruction in the program where execution is repeated.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESNONOParameters:(none)Syntax:			Repeat
RepeatBinary Interface:		Command Byte: 	0x09Parameters:		NoneTick count:		0Return Count:		0Notes:Example:		ÒRepeatÓ -> 0x09
SaveConfigInFlashCommand Description:	Save the values of configuration variables into non-volatile memory.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:(none)Syntax:	SaveConfigInFlashNote:	The following variables will be save to flash when this command is invoked: * X-Position-Readback-Offset* Y-Position-Readback-Offset* X-Position-Readback-Gain* Y-Position-Readback-Gain* Global-Sample-Size* DelayedSetSync delay* DelayedUnsetSync delay* MOF Normalization shift* MOF ModeNote:	This command show only be invoked when the Scan Controller is in idle mode.
SaveConfigInFlashBinary Interface:		Command Byte: 	0x35Parameters:		NoneTick count:		1Return Count:		0Notes:Example:		ÒSaveConfigInFlashÓ -> 0x35
SerialNumberSetupCommand Description:	Define and initialize the serialization function of the SC2000.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:IDF	first program ID in the list of programs       IDL	last program ID in the list of programs       N	number of characters in the serial numberID0	LSD of the initial number, a PgmID in the range IDB to IDL; or 0.  ID1	LSD+1 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 1. ID2	LSD+2 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 2. ID3	LSD+3 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 3. ID4	LSD+4 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 4. ID5	LSD+5 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 5. ID6	LSD+6 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 6. ID7	LSD+7 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 7. ID8	LSD+8 of the initial number, a PgmID in the range IDB to IDL; or 0 if the number of places in the serial number is less than 8. ID9	LSD+9 of the initial number, a PgmID in the range IDB to IDL or 0 if the number of places in the serial number is less than 9.ID10	LSD+10 of the initial number, a PgmID in the range IDB to IDL or 0 if the number of places in the serial number is less than 10.Syntax:	SerialNumberSetup IDF IDL N ID0 ID1 ID2 ID3 ID4 ID5 ID6 ID7 ID8 ID9 ID10 
SerialNumberSetupBinary Interface:		Command Byte: 	0x41Parameters:		14 bytes as (14) bytesTick count:		1Return Count:		0Notes:Example:	ÒSerialNumberSetup 31 42 11 32 32 32 32 32 32 32 32 33 33 33Ó -> 0x411F2A0B2020202020202020212121
SetAnalogOutputCommand Description:	Set the value of the Laser Interface Board analog output channel.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:n	The value of the analog output channel.       Note:	This command works with the Laser Interface Board.Syntax:			SetAnalogOutput n
SetAnalogOutputBinary Interface:		Command Byte: 	0x4DParameters:		2 bytes as (1) big endian wordTick count:		1Return Count:		0Notes:Example:		ÒSetAnalogOutput 127Ó -> 0x4D007F
SetConfigVarCommand Description:	Sets the value of a configuration variable.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:Id	Id identifies the variable to change.Value 	Value is the value that the variable will take. Syntax:	SetConfigVar Id Value Note:Configuration Variables IdVariable Values(default)See Command1Global Sample Size1 to 100  (10)SetGSS, WaitPositionXY, WaitPosition2X readback gain correction0.5 to 1.5SetXPROffset, SetXPRGain, SetYPROffset, SetYPRGain, WaitPositonXY, WaitPositon, ?Position3X readback offset correction-32,768 to 32,7674Y readback gain correction0.5 to 1.55Y readback offset correction-32,768 to 32,7676SetSync delay0 to 32,767SetSetsyncDelay,DelayedSetSync, DelayedLaserGate, DelayedSetFPS7UnSetSync delay0 to 32,767SetUnsetsyncDelay,DelayedUnSetSync 8MOF normalization shift-14 to 0  (-9)SetMOFShift, SetMOFGains9Mark on the Fly mode0 : Use B train pulses1 : Ignore B train pulsesSetMOFModeNote:	The Global Sample size is the number of position readings that will be used in by the WaitPosition calculations (see WaitPositionXY and WaitPosition).Note:	The gain and offset variables are the correction factors to be applied to the position readback readings so it will agree with the axis position register values that are sent to the SAX.
SetConfigVarBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as (2) big endian unsigned wordsTick count:		1Return Count:		0Notes:* Parameter value checking is not performed on this command.* Gain values must be translated manually.gain is converted from a float to an integer by the following formula: Example:		ÒSetConfigVar 1 25Ó -> 0x3000010019
SetFPSCommand Description:	Trigger the FPS output of the Laser Interface Board.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:count	Sub-tick count micro-delay, one count equals 240nS.			Note:	This command works with the Laser Interface Board.Note:	The instruction will wait count number of 240nS clock ticks and then assert the FPS line on the Laser Interface Board according to the FPS configuration specified in a previously issued LaserModeSetup command.Note:	This command will assert the FPS signal of the laser board. If  the LaserModeSetup command parameter fpsm = 0 then the FPS signal will be a short pulse of about 1 ?Sec. If fpsm = 1 then the FPS signal will remain asserted (extended) until the first, second, third or fourth pulse of the PWM signal (as configured by LaserModeSetup command parameter fpsx), afterwhich it is automatically unasserted. Syntax:	 SetFPS count
SetFPSBinary Interface:		Command Byte: 	0x4AParameters:		2 bytes as (1) big endian wordTick count:		0Return Count:		0Notes:Example:		ÒSetFPS 33Ó -> 0x4A0021
SetGSSCommand Description:	Set the sample size of the position readback buffer.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:Buffer_Size	Set the size of the position readback buffer to Buffer_Size.Syntax:	SetGSS Buffer_SizeNote:	The mnemonic used is SetGlobalSampleSizeNote: 	Power on default value is the value saved in Flash.Note:	GlobalSampleSize is used in conjunction with the WaitPosition and WaitPositionXY commands to establish a sampling time interval over which position readback data is averaged.
SetGSSBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as the constant 0x0001 and (1) unsigned word.Tick count:		1Return Count:		0Notes:Example:		ÒSetGSS 50Ó -> 0x3000010032
SetLaserPowerCommand Description:	Set the laser output power setting. The value is latched onto the digital output of the Laser Interface Board.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:n	The laser output power setting.Note:	This command works with the Laser Interface Board.Syntax:	 SetLaserPower n
SetLaserPowerBinary Interface:		Command Byte: 	0x45Parameters:		2 bytes as (1) big endian word.Tick count:		1Return Count:		0Notes:Example:		ÒSetLaserPower 127Ó -> 0x45007F
SetMOFGainsCommand Description:	Define the Mark on the Fly gain settings for the X and Y axis.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:x-gain	The x-axis gain setting, a floating point number.y-gain	The y-axis gain setting, a floating point number.Note:	This command works with the Laser Interface Board.Note:	At the assembly language level the X and Y gain parameters are entered as floating point numbers. The assembler will convert these numbers to a fixed point binary representation according to the setting  of Òfixed point shiftÓ control on the Mark on the Fly configuration panel, located under the Config button. The range of values that can be accepted for a given fixed point representation are defined in Table 1. The fixed point number format that the SC2000 accepts for these parameters can be altered from the default 7.9 format by using the SetMOFShift command.  You must insure that, at the time that the SetMOFGains command runs, that the instruction was compiled with the dynamic value of the SetMOFShift configuration variable.Syntax:	 SetMOFGains x-gain y-gain
SetMOFGainsBinary Interface:		Command Byte: 	0x4EParameters:	4 bytes as (2) word length fixed point numbers (programmable representation)Tick count:		1Return Count:		0Notes:Example:		ÒSetMOFGains 14.6  0.555Ó -> 0x4E1D33011C
SetMOFModeCommand Description:	Set the mode of operation for Mark on the Fly.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESNOParameters:mode	The Mark on the Fly mode of operation.modedescription0Mark on the Fly will examine both position encoder pulse Train A and pulse train B while reading the position encoder. In this way the direction of travel can be determined.1Mark on the Fly will examine only position encoder pulse Train A.Note:	This command works with the Laser Interface Board.Note:	The mode value is stored in the SC2000 as a global configuration variable. If you execute the command SaveConfigToFlash then this value will become the default value when the SC2000 is power cycled.Syntax:	SetMOFMode mode
SetMOFModeBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as the constant 0x0009 and (1) big endian word.Tick count:		1Return Count:		0Notes:Example:		ÒSetMOFMode 0Ó -> 0x3000090000
SetMOFShiftCommand Description:	Set the fixed point number representation for the SetMOFGains command.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESNOYESNOParameters:shift	The location of the decimal point in the fixed point number representation of the SetMOFGains commandÕs parameters Xgain and Ygain.       Note:	This command works with the Laser Interface Board.Note:	The value simply describes the location of the decimal point in a 16 bit fixed point number. For example Ð9 (default power ON value) cooresponds to a fixed point number format of 7.9. 0 corresponds to a fixed point number format of 16.0. This command changes the value of a configuration variable; if you execute the command SaveConfigToFlash you will store a new power-ON default value.Note: 	The range of fixed point numbers expressed in certain formats is given in the following table:FormatRange of expression2.14-2     to     1.9999389648437503.13-4     to     3.9998779296875004.12-8     to     7.9997558593750005.11-16    to    15.9995117187500006.10-32    to    31.9990234375000007.9-64    to    63.9980468750000008.8-128   to   127.9960937500000009.7-256   to   255.99218750000000010.6-512   to   511.98437500000000011.5-1024  to  1023.96875000000000012.4-2048  to  2047.93750000000000013.3-4096  to  4095.87500000000000014.2-8192  to  8191.75000000000000015.1-16384 to 16383.50000000000000016.0-32768 to 32767.000000000000000Table 1. Number range for fixed point representationsSyntax:	 SetMOFShift shift
SetMOFShiftBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as the constant 0x0008 and (1) big endian word.Tick count:		1Return Count:		0Notes:Example:		ÒSetMOFShift Ð9Ó -> 0x300008FFF7
SetOutputSignalCommand Description:	Turn certain laser interface board output signals ON and OFF.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:select	Select the output signal of the Laser Interface Board to control.	selectSignal Name1REMOTE_EXECUTE 2MARK_ERROR.3MARK_ IN_PROGRESS.4SHUTTERstate	The signal state, either ON or OFF.stateAction0OFF1ONNote:	This command works with the Laser Interface Board.Syntax:	 SetOutputSignal select state
SetOutputSignalBinary Interface:		Command Byte: 	0x46Parameters:		4 bytes as (2) big endian wordsTick count:		1Return Count:		0Notes:Example:		ÒSetOutputSignal 2 1Ó -> 0x4600020001
SetPWMCommand Description:	Define the rectangular waveshape of the PWM output signal (Q-switch)  pulses output from the Laser Interface Board.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:period	The period of the PWM waveform using a timebase with a period of 240 nS.       trise	The time interval until the rising edge of the waveform using a timebase with a period of 240 nS.       tfall	The time interval until the falling edge of the waveform using a timebase with a period of 240 nS.       Note:	This command works with the Laser Interface Board.Note:	The SetPWM command is used to set the pulse width modulation characteristics of the PWM signal output by the Laser Interface Board and gated ON and OFF by the LaserGate and DelayedLaserGate commands. All timings are based upon a timebase with a period of 240nS. Flexible definition of the PWM waveform is provided by giving the definition three parameters, the overall period of the waveform, the time from the start of the waveform to the rising edge of the PWM signal and the time from the start of the waveform to the falling edge of the signal. The timing of the signal is shown in the following diagram.
Figure 1. Parameterization of PWM waveform	As shown in the figure, the use of three parameters in the definition of a rectangular wave allows greater flexibility in the timing of PWM pulses. This is especially important when the FPS Extension mode extends into the initial pulse train of the PWM signal. Additionally there are some special combinations of parameters that cause the PWM output to be 100% or 0%. A table listing all of the options is presented next.Duty Cycle (D)Parameter RulesD = 0%trise > period0% < D < 100%tfall < period, trise < tfallD = 100%trise < period, tfall > periodSyntax:	 SetPWM period trise tfall
SetPWMBinary Interface:		Command Byte: 	0x43Parameters:		6 bytes as (3) big endian wordsTick count:		1Return Count:		0Notes:Example:		ÒSetPWM 50 23 27Ó -> 0x4300320017001B
SetSetSyncDelayCommand Description:	Set the global value of the tick delay for the DelayedSetSync command.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:delay	Set the tick delay for the DelayedSetSync command to the value delay.Syntax:	SetSetSyncDelay delay Note: 	Power on default value is the value saved in Flash.Note: 	The tick count delay value is shared by the following commands: DelayedSetSync, DelayedLaserGate, DelayedSetFPS, DelayedSetOutputSignal.
SetSetSyncDelayBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as the constant 0x0006 and (1) big endian unsigned word.Tick count:		1Return Count:		0Notes:Example:		ÒSetSetSyncDelay 31Ó -> 0x300006001F
SetTicklePulsesCommand Description:	Set the period and width of the tickle pulses.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:period	Set the period of the tickle pulse waveform using a timebase with a period of 240 nS.       width	Set the ON time of the tickle pulse waveform using a timebase with a period of 240 nS.       Note:	This command works with the Laser Interface Board.Note:	Tickle pulses are used to keep the laser warm when it is not marking. Use the LaserModeSetup command to configure the use of tickle pulses, then use the LaserGate and DelayedLaserGate commands to toggle the output of the Laser Interface Board between tickle pulses (OFF condition) and PWM output (ON condition).Syntax:	SetTicklePulses period width 
SetTicklePulsesBinary Interface:		Command Byte: 	0x44Parameters:		4 bytes as (2) big endian wordsTick count:		1Return Count:		0Notes:Example:		ÒSetTicklePulses 500 4Ó -> 0x4401F40004
SetUnsetSyncDelayCommand Description:	Set global value of the tick delay for the DelayedUnsetSync command.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:delay	Set the tick delay for the DelayedUnsetSync command to the value delay.Syntax:	SetUnsetSyncDelay delay Note: 	Power on default value is the value saved in Flash.
SetUnsetSyncDelayBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as the constant 0x0007 and (1) big endian unsigned word.Tick count:		1Return Count:		0Notes:Example:		ÒSetUnsetSyncDelay 31Ó -> 0x300007001F
SetXPRGainCommand Description:	Set the value of the X-axis position readback correction coefficient.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:gain	Set the X-axis position readback gain coefficient to the value gain.Syntax:	SetXPRGain gain Note:	The mnemonic used is SetXPositionReadbackGainNote: 	Power on default value is the value saved n Flash.
SetXPRGainBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as the constant 0x0002 and (1) big endian unsigned word.Tick count:		1Return Count:		0Notes:gain is converted from a float to an integer by the following formula: Example:		SetXPRGain 1.1 -> 0x3000020000
SetXPROffsetCommand Description:	Set the value of the X-axis position readback correction constant.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:offset	Set the value of the X-axis position readback offset correction to offset.       Syntax:	SetXPROffset offsetNote:	The mnemonic used is SetXPositionReadbackOffsetNote: 	Power on default value is the value saved in Flash.
SetXPROffsetBinary Interface:		Command Byte: 	0x30Parameters:	4 bytes as the constant 0x0003 and  (1) big endian signed word.Tick count:		1Return Count:		0Notes:Example:		ÒSetXPROffset 102Ó -> 0x0900030066
SetYPRGainCommand Description:	Set the value of the Y-axis position readback correction coefficient.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:gain	Set the value of the Y-axis position readback correction coefficient to the value gain.Syntax:	SetYPRGain gainNote:	The mnemonic used is SetYPositionReadbackGainNote:	Power on default value is the value saved in Flash.
SetYPRGainBinary Interface:		Command Byte: 	0x30Parameters:		4 bytes as the constant 0x0004 and (1) big endian unsigned word.Tick count:		1Return Count:		0Notes:gain is converted from a float to an integer by the following formula: Example:		ÒSetYPRGain 0.9Ó -> 0x300004
SetYPROffsetCommand Description:	Set the value of the Y-axis position readback offset correction.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:offset	Set the value of the Y-axis position readback offset correction constant to offset.       Syntax:	SetYPROffset offsetNote:	The mnemonic used is SetYPositionReadbackOffsetNote: 	Power on default value is the value saved in Flash.
SetYPROffsetBinary Interface:		Command Byte: 	0x30Parameters:	4 bytes as the constant 0x0005 and  (1) big endian signed word.Tick count:		1Return Count:		0Notes:Example:		ÒSetYPROffset Ð1740Ó -> 0x300005F92F
SetSyncCommand Description:	Sets the sync bit for the specified channel.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:channel_mask	channel_mask specifies which one of the writable sync channels is to be set. Syntax:			SetSync channel_maskchannel_maskMeaning1Sync Channel 1 (J4, pin 1 pulls low)2Sync Channel 2 (J4, pin 2 pulls low)3Sync Channel 3 (J4, pin 3 pulls low)4Sync Channel 4 (J4, pin 4 pulls low)
SetSyncBinary Interface:		Command Byte: 	0x12Parameters:		2 bytes as (1) big endian signed word.Tick count:		0Return Count:		0Notes:Example:		ÒSetSync 4Ó -> 0x120004
SlewCommand Description:	Move smoothly to the given absolute position on the current axis in the specified number of tick counts.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESNOYESYESYESNOParameters:coord	The absolute position on the current axis to slew to coord.count	The number of 23 ?S ticks that it will take to complete the slew motion.Syntax:			Slew coord countNote:	Gradually moves to the given x and y positions over count number of 23 ?S ticks.
SlewBinary Interface:		Command Byte: 	0x05Parameters:		4 bytes as (1) big endian signed word and (1) big endian unsigned word.Tick count:		value of countReturn Count:		0Notes:Example:		ÒSlew 5000 350Ó -> 0x051388015E
SlewXYCommand Description:	Move smoothly to the given absolute vector position in the specified number of tick counts.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESNOParameters:x-coord	The absolute position of the X-axis destination. y-coord	The absolute position of the Y-axis destination.count	count specifies the number of 23 ?S ticks in which to smoothly move in a straight line.Syntax:			SlewXY x-coord y-coord countNote:	Gradually moves to the given x and y positions over count number of 23 ?S ticks.
SlewXYBinary Interface:		Command Byte: 	0x06Parameters:		6 bytes as (2) big endian signed words and (1) big endian unsigned word.Tick count:		Value of countReturn Count:		0Notes:Example:		ÒSlewXY 5000 5000 450Ó -> 0x061388138801C2
TransformAxisCommand Description:	Apply rotation or skew transformation to vector motion commands.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESYESParameters:a	The first parameter, defined as  for rotation and for skew.b	The second parameter, defined as  for rotation and for skew.c	The third parameter, defined as  for rotation and for skew.d	The fourth parameter, defined as  for rotation and for skew.Syntax:			TransformAxis a b c dNote:	The firmware performs matrix transformation			Xout = a*x + b*y			Yout = c*x + d*y	where the pure rotation matrix is defined as				For example, for ????????????????? degrees, transform matrixes are:	,,,	The parameter value range of the a,b,c and d coefficients allows rotations   ? of  -90 < ??<  90 degrees?	The command allows for skew transformation of the projection plane with the following matrix definition:	
TransformAxisBinary Interface:		Command Byte: 	0x3FParameters:		8 bytes as (4) big endian signed word.Tick count:		1Return Count:		0Notes:a,b,c and d are converted from a float to an integer by the following formula: 	The?firmware performs transformation in the follow order:	1) Tweak Axis.	2) Rotation.	3) Flip, Exchange.Example:	ÒTransformAxis 0.866025 0.5  -0.5 0.866025Ó -> 0x3F6EDA4000C0006EDA
TweakAxisCommand Description:	Apply gain and offset to subsequent axis operations.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESNOYES1YESYESYESParameters:gain	The gain factor is applied to the motion command coordinates of the current axis where a gain of 1.0 corresponds to the identity transformation.offset	offset describes the offset of the origin of the current axis for motion commands.Syntax:			TweakAxis gain offsetNote:	TweakAxis a raster mode command used to set the absolute gain and offset values of the current axis. Note:	TweakAxis may not be issued concurrent with Dual Single Axis mode but it may be a program instruction in either or both of the Dual Single axis programs.
TweakAxisBinary Interface:		Command Byte: 	0x1BParameters:		4 bytes as (1) big endian unsigned word and (1) big endian signed word.Tick count:		1Return Count:		0Notes:gain is converted from a float to an integer by the following formula: Example:		ÒTweakAxis 1.0 0Ó -> 0x1B80000000
TweakAxisXYCommand Description: 	Apply gain and offset to subsequent vector operations.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESYES1YESYESYESParameters:x-gain	The gain factor is applied to the motion command coordinates of the X-axis where an x-gain of 1.0 corresponds to the identity transformation.x-offset	x-offset describes the offset of the origin of the X-axis for motion commands.y-gain	The gain factor is applied to the motion command coordinates of the Y-axis where a y-gain of 1.0 corresponds to the identity transformation.y-offset	y-offset describes the offset of the origin of the Y-axis for motion commands.Syntax:			TweakAxisXY x-gain x-offset y-gain y-offsetNote:	TweakAxisXY may be issued concurrent with Dual Single Axis mode but may not be a program instruction contained in one of the Dual Single Axis mode programs.Note:	TweakAxisXY is a vector mode command used to set the gain and offset values for both the X and Y axis. 
TweakAxisXYBinary Interface:		Command Byte: 	0x1CParameters:	8 bytes as (1) big endian unsigned word, (1) big endian signed word, (1) big endian unsigned word and (1) big endian signed word.Tick count:		1Return Count:		0Notes:gain is converted from a float to an integer by the following formula: Example:		ÒTweakAxisXY 1.0 0 1.0 0Ó -> 0x1C8000000080000000
UnSetSyncCommand Description:	Resets the Sync bit for the specified channel.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:channel_mask	channel_mask specifies which one of the writable sync channels is to be reset. Valid numbers for channel_mask are 1, 2, 3, 4.channel_maskAction1Sync Channel 1 (J4, pin 1 high impedance)2Sync Channel 2 (J4, pin 2 high impedance)3Sync Channel 3 (J4, pin 3 high impedance)4Sync Channel 4 (J4, pin 4 high impedance)Syntax:			UnsetSync channel_mask
UnsetSyncBinary Interface:		Command Byte: 	0x13Parameters:		2 bytes as (1) big endian signed word.Tick count:		1Return Count:		0Notes:Example:		ÒUnsetSync 4Ó -> 0x130004
VectorCommand Description:	Place the Scan Controller in vector mode.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESNONOYESNOParameters:(none)Syntax:			VectorNote:	The Vector command is used to change the operational mode of the Scan Controller to Vector operations. In the Vector mode, the Scan Controller will only accept motion commands of type vector, commands that have the XY suffix. Also, only programs of type 1 can be executed with the ExecutePgm command. Raster programs can be executed from vector mode with the ExecuteRaterPgm command.
VectorBinary Interface:		Command Byte: 	0x1AParameters:		NoneTick count:		1Return Count:		0Notes:Example:		ÒVectorÓ -> 0x1A
WaitCommand Description:	Pause execution for the given number of tick counts.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:wait_count	Pause execution of commands, either immediate or in a program, for count number of 23 ?S tick. Count is a number between 0 and 4294967296.Syntax:			Wait wait_count
Wait Binary Interface:		Command Byte: 	0x10Parameters:		4 bytes as (1) middle endian double word.Tick count:		Value of countReturn Count:		0Notes:Example:		ÒWait 56000Ó -> 0x10DAC00000		Given 0x 00  00  DA  C0		          1 | 2 | 3 | 4		send the bytes in the order  3 4 1 2
WaitMOFDistanceCommand Description:	Cause the SC2000 to trigger and then wait a certain number of Mark on the Fly position encoder pulses before starting the mark job. Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:pulse_count	Number of pulses of the Mark on the Fly position encoder.       Syntax:			WaitMOFDistance pulse_countNote:	Use this command with Mark on the Fly. The parameter sets the number of position encoder pulses that must pass between the assertion of BEGIN_MARK signal and the execution of the next command in the program. This effectively generates a wait based of the rate of motion of the marking target.
WaitMOFDistanceBinary Interface:		Command Byte: 	0x4FParameters:		2 bytes as (1) big endian word.Tick count:		1Return Count:		0Notes:Example:		ÒWaitMOFDistance 15Ó -> 0x4F000F
WaitPositionCommand Description:	Pause Scan Controller program execution until the commanded position for the current axis is reached. Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESNOYESYESYESNOParameters:dev	dev is the deviation limit, in DAC counts, about the target X-axis position.Syntax:	WaitPosition dev Note:	The computed deviation is the size of the window around the commanded position it takes the form ofwith n being the value of the global sample size parameter (see configuration settings). The larger the value of n the better rejection of overshoot of the galvoÕs position but the slower the response.  If the user wants to act on the current position reading n can be set to 1. Program execution stops at the WaitPosition command until .Note: 	When using WaitPosition in dual single axis mode, remember each axis program will move on when the position for itÕs axis meets the specified requirement.  This will not keep the axis program in sync.  In fact it may very well cause them to lose sync if there has been an effort to synchronize them.Example:  	If the user wants a ?10 count window averaged over five 23?S readings, set the deviation to 10 and the sample size to 5.
WaitPositionBinary Interface:		Command Byte: 	0x32Parameters:		2 bytes as (1) big endian word.Tick count:		dependent on servoReturn Count:		0Notes:Example:		ÒWaitPosition 1500Ó -> 0x3205DC
WaitPositionXYCommand Description:	Pause Scan Controller program execution until the commanded position is reached. Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionNOYESNOYESYESNOParameters:X-dev	X-dev is the deviation value about the target X-axis position.Y-dev 	Y-dev is the deviation value about the target Y-axis position. Syntax:	WaitPositionXY X-dev Y-devNote:	The computed deviation is the size of the window around the commanded position it takes the form ofwith n being the value of the global sample size parameter (see configuration settings). The larger the value of n the better rejection of overshoot of the galvoÕs position but the slower the response.  If the user wants to act on the current position reading n can be set to 1. Program execution stops at the WaitPosition command until  for both axisÕ.Note: 	When using WaitPosition in dual single axis mode, remember each axis program will move on when the position for its axis meets the specified requirement.  This will not keep the axis program in sync.  In fact it may very well cause them to lose sync if there has been an effort to synchronize them.Example:  	If the user wants a ?10 count window averaged over 5 23?Sec readings, set the deviation to 10 and the sample size to 5.
WaitPositionXYBinary Interface:		Command Byte: 	0x31Parameters:		4 bytes as (2) big endian words.Tick count:		dependent on servoReturn Count:		0Notes:Example:		ÒWaitPositionXY 2000 Ð4000Ó -> 0x3107D0F060
WaitSyncCommand Description:	Pause Scan Controller program execution until the specified sync channel is set.Valid Run-time ModesRaster ModeVector ModeDual Single Axis ModeProgram InstructionImmediate InstructionConcurrent InstructionYESYESYESYESYESNOParameters:sync_channel	sync_channel specifies which one of the readable sync channels shall be used to operate the WaitSync command. sync_channelAction1Pause execution until a setsync 1 command is executed.2Pause execution until a setsync 2 command is executed.3Pause execution until a setsync 3 command is executed.4Pause execution until a setsync 4 command is executed.5Pause execution until J4, pin 6 goes high6Pause execution until J4, pin 7 goes high7Pause execution until J4, pin 8 goes high8Pause execution until J4, pin 9 goes high9Pause execution until J4, pin 10 goes high10Pause execution until J4, pin 11 goes high11Pause execution until J4, pin 12 goes high12Pause execution until J4, pin 13 goes highSyntax:		WaitSync sync_channel
WaitSync Binary Interface:		Command Byte: 	0x11Parameters:		2 bytes as (1) big endian signed word.Tick count:	if sync channel is true tick count = 0, if sync channel is false count = real time.Return Count:		0Notes:Example:		ÒWaitSync 5Ó -> 0x110005
Scan Controller error codes0 	"Success."1	"Type argument not 0 or 1."2 	"Not in raster mode."3	"X-Axis Program is not of type Raster"4	"Y-Axis Program is not of type Raster."5	"Program is not of type Raster"6	"Not in vector mode."7	"Program is not of type Vector"8	"Invalid channel number"9  	"Invalid channel number"10	"Axis argument not 1 or 2."12	"Invalid device number."13	"X-Axis Program ID not in the range 1 - 254."14	"Y-Axis Program ID not in the range 1 - 254."15	"Program ID not in the range 1 - 254."16	"Y-Axis Program ID is marked as inactive."17	"Program ID is marked as inactive."18	"Program ID is unassigned."19	"X-Axis Program ID is marked as inactive."20	"Another program is already running."21	" Illegal command while a program is running.Ó22	"Illegal data bits."23	"Unsupported baud rate."24	"Illegal media type."26	"Illegal stop bits."27	"Illegal parity."28	"Unknown command number encountered."29	"PIR UART Line Status Error."30	"BDMA Read Queue Overflow."31	"Stack Overflow - caused when program nesting too deep."32	"Stack Underflow."33	"Repeat command not issued from a command file."34 	"Dispatch Queue Overflow."35	"Out Of Flash Memory."36	"Out Of SRAM Memory."37	"Out of Flash Memory Allocation Table Space."38 "Out of SRAM Memory Allocation Table Space."39	"Computed CRC did not match received CRC."40	"Startup encountered an unknown command."41 "Cannot write to memory, memory locked."42 "Invalid Id."43 "Parameter out of range." 44 " X Axis SAX not ready"45 " Y Axis SAX not ready"46 " Sync Queue Overflow"47	" Command is not legal in a program"48 	" Command is not an immediate command"49 " RS-485 not yet supported"50	"One of Serialization Parameters is out of range"51	"One of Tickle Pulse Parameters is out of range"
Binary Interface Definition? Copyright 1998-2001 GSI Lumonics, Inc.This section defines the relationship between the Scan Controller Assembly language and the binary machine language transmitted to the SC2000 Scan Controller. #%%DI assembler syntax file%%#Author: Fred Stewart and Gagik Manukian#Date 10-15-01####  Format of command description record #### field 1: command text# field 2: number of input parameters# field 3: binary ID# field 4: input parameter and implicit parameter format strings# field 5: command execution context# field 6: number of bytes to read back# field 7: readback interpretation# field 8: binary format string################################################ Field descriptions ############# Field 1: command text# Abstract: The text of the command as a collection index. Note that#           multi-word statements are mangled down to one word my removing#           all intervening parameters and whitespace. The 'command text'#           is downcased when the syntax file is read into the assembler.#	    Note, all commands are sent as BYTE# Field 2: number of input parameters# Abstract: The number of parameters that the command takes. Note that #           all parameters are required. The end statement has an implicit#	    parameter (CRC value) that does not appear in the source line.# Field 3: binary ID# Abstract: The byte representation of the machine code. This is a decimal number.# Field 4: parameter format string# Abstract: This is a quoted string with tokens separated by whitespace. The number #           of token is equal to the number of parameters that the command accepts.#           The token format for each parameter consists of enumerated type tokens#	    separated by a '%' token separator. Each parameter token is composed of#	    three enumerated type tokens that specify the following attributes in the#           following order: 'Type of parameter' , 'binary format' , 'addressing mode'.#### Type of parameter# Abstract: Describes what the parameter is, used for bounds check of input variables.# type explainations#-> UNDEFINED	This will generate an assembler error.#-> STRING	This is byte data, not accepted by the scan controller at this time#-> LENGTH	This is an asciiz string preamble, not accepted by the scan controller at this time#-> CRC		This is a CRC checksum of a Scan Controller program. It can have two values: #->             1. A value of 0xFFFFFF is the default checksum and is ignored.#->             2. A computed CRC checksum. The computation of the CRC checksum is illustrated #->                in the source code crctable.c and the corresponding program crc-gen.exe .#-> COUNT	This is a 1 byte tick count value for slew commands. 0 - 32767#-> SN		This is a serial number, not accepted by the scan controller at this time#-> COMTYPE	Communications interface. This value is always 232.#-> PARITY	Number of parity bits. 0 - none, 1 - odd, 2 - even#-> STOPBITS	Number of stop bits 1 or 2#-> DATABITS	Number of data bits. This value is always 8.#-> SYNCDELAY   Latency, in ticks, for operation of delayedsetsync and delayedunsetsync.  0 - 32767#-> BAUD		baud rate# baud rate specifier# val  baud# 1 - 2400 # 2 - 4800 # 3 - 9600 # 4 - 19200 # 5 - 38400 # 6 - 57600 # 7 - 115200#-> AXIS	Axis specifier 1 - X axis, 2 - Y axis#-> PGMTYPE	Program type, 0 - raster program , 1 - vector program.#-> DEVICEID	Device ID. 1 - X axis, 2 - Y axis, 3 - both axis.#-> RASTERVAL	Raster mode target axis, 1 - x axis, 2 - y axis#-> PGMID	Program name, 1-254#-> RELPOS	Relative position -32768 - 32767#-> ABSPOS	Absolute position -32768 - 32767#-> RELOFFSET	Relative offset -32768 - 32767#-> GAIN	Gain value 0.5 - 1.5 in an assembly language statement.# To convert the floating point gain value to an integer, multiply the gain by 32768 # and retain the integer part of the result. Use the integer in the binary comand to the# scan controller.###-> ROTA		    rotation parameter a and d# 0 <= value <= 1###-> ROTB		    rotation parameter b and c# -1 <= value <= 0.999969#-> BOOL # either 0 or 1#-> GSS		global sample size  1 - 100#-> ALLCHAN	All channels 1-14#-> CHANMASK	Channel mask 1 - 4, 13, 14#-> CHANID	Channel id 1 - 12, 13, 14#-> DBLWORD	double word data, 4 bytes#-> WORD	word data, 2 bytes#-> BYTE	byte data#-> CONST	constant value, not used###-> TICKLEP	Tickle pulses period 4-1023# 4 <= value <= 1023###-> TICKLEW	Tickle pulses width  1-15# 1 <= value <= 15#-> LPOWER	Laser Power 0-255#-> LGATE	Laser Power 0-127#-> LOUTPUTTYPE  1-4#-> SERIALPGMID	Program name, 0-254#-> QSWITCHPERIOD, 4 - 65535#-> SHIFTVAL -14 - 0#-> DYNAFIXEDPOINT formatting instruction to convert a float to fixed point#### binary format# Abstract: Describes how to format a multi-byte number for serial transmission. Note,#           this section has some notation problems, the descriptions match the formatting#           for the machine but the description labels do not make sense outside of my#	    context, for example LEWORD is formatted as a big endian word, but the label#	    really means little endian.#type explainations#-> BYTE		not used#-> LEWORD	big endian, two byte value, send MSB first, LSB last.#-> BEWORD	not used #-> LEDBLWORD	middle endian, 4 byte value#		Given 0x 00  01  FF  FE#			  1 | 2 | 3 | 4#		Send the bytes in the order 3 4 1 2#-> BEDBLWORD	not used##### addressing mode# Abstract: the only addressing mode for parameters is immediate.#type explainations#-> IMM: immeadiate addressing mode. The actual value of the parameter is sent.# Field 5: command execution context# Abstract: The context a assembler operation for this command. Some commands#           cannot be executed from within a program. For these commands, the#           assembler will generate an error. The token is a list of enumerated#           tokens separated by '|' the or connector. The or connector signifies#           that the command may be assembled in multiple contexts.#type explainations#-> ASMR: program context, commands in a raster program.#-> ASMV: program context, commands in a vector program.#-> INT: interpreter context, allows all commands for the Scan Controller. #-> TST: a command designed to test the assembler, not sent to the Scan Controller.#-> DIS: disallowed command, command is never translated, assembler generates an error.# Field 6: number of bytes to read back# Abstract: The number of bytes to read back from the Scan Controller. This is used#           to in conjunction with query commands that collect and interpret#           data from the Scan Controller. This is a decimal number.# Field 7: readback interpretation# Abstract: Method of interpreting the data read back from the Scan Controller. Consists#           of a single enumerated type token.# type explainations###-> MEMINSPECT		Program listing, currently undefined.###-> MEMSPACE		Available memory space value.# Big endian double word, 4 byte value#		Given 0x 00  01  FF  FE#			  1 | 2 | 3 | 4#		get the bytes in the order 1 2 3 4###-> IDVAL		ID value.#  2 bytes	Boot Segment Revision           <byte 1> . <byte 2>	#  2 bytes	Firmware Revision (default 1.0) <byte 3> . <byte 4>	#  1 byte	Hardware (default 0)            <byte 5>#  1 byte	Device ID (default 0)           <byte 6>###-> OCALVAL		Optical Calibration value.#		X-Axis Output Pos	Y-Axis Output Pos	X-Axis Read Pos	Y-Axis Read Pos	X-Axis System Gain	X-Axis System Offset	Y-Axis System Gain	Y-Axis System Offset#Channel 9	Word 1			Word 2			Word 3		Word 4		Word 5			Word 6			Word 7			Word 8#Channel 10	Word 9			Word 10			Word 11		Word 12		Word 13			Word 14			Word 15			Word 16#Channel 11	Word 17			Word 18			Word 19		Word 20		Word 21			Word 22			Word 23			Word 24#Channel 12	Word 25			Word 26			Word 27		Word 28		Word 29			Word 30			Word 31			Word 32###-> POSVAL		Position value. 1 word, each word is two bytes, MSB first, LSB last###-> SYNCVAL           Sync readback value. 1 word, each word is two bytes, MSB first, LSB last#   bit  0: sync 1#   bit  1: sync 2#   bit  2: sync 3#   bit  3: sync 4#   bit  4: sync 5#   bit  5: sync 6#   bit  6: sync 7#   bit  7: sync 8#   bit  8: sync 9#   bit  9: sync 10#   bit 10: sync 11#   bit 11: sync 12#   bit 12: sync 13 (inverted sense)#   bit 13: sync 14#   bit 14: Y axis servo ready#   bit 15: X axis servo ready###-> ERRORVAL		Error report from ?status command.## 3 words, each word is two bytes, MSB first, LSB last# word 1: Function/Program ID#     0        error in PIR (communications)#     1 - 255  error from program (pgm ID)#     9999     system error# word 2: Command Number (the command value as a word instead of a byte)	# word 3: Error Number (See Const.h for error code definitions.)###-> SYSDATA		System data, this is currently undefined.###-> TEMPVAL		Temperature value# 4 words, each word is two bytes, MSB first, LSB last.#  word 1: x-axis servo temperature#  word 2: x-axis alternate servo temperature#  word 3: y-axis servo temperature#  word 4: y-axis alternate servo temp###-> BOOLEAN		Boolean value, 2 bytes, MSB first, LSB last, value 0 or 1###-> NONE		No readback context, bytes are thrown away.###-> UNDEFINED		Generates an assembler error.# Field 8: binary format string# Abstract: This is included as a pathetic hack for the end statement. The data is#           a quoted CSV string.#operational commandsPosition:1:1:"ABSPOS%LEWORD%IMM":INT|ASMR:0:NONE:"1"PositionXY:2:2:"ABSPOS%LEWORD%IMM ABSPOS%LEWORD%IMM":INT|ASMV:0:NONE:"2"DeltaPosition:1:3:"RELOFFSET%LEWORD%IMM":INT|ASMR:0:NONE:"3"DeltaPositionXY:2:4:"RELOFFSET%LEWORD%IMM RELOFFSET%LEWORD%IMM":INT|ASMV:0:NONE:"4"Slew:2:5:"ABSPOS%LEWORD%IMM COUNT%LEWORD%IMM":INT|ASMR:0:NONE:"5"SlewXY:3:6:"ABSPOS%LEWORD%IMM ABSPOS%LEWORD%IMM COUNT%LEWORD%IMM":INT|ASMV:0:NONE:"6"DeltaSlew:2:7:"RELOFFSET%LEWORD%IMM COUNT%LEWORD%IMM":INT|ASMR:0:NONE:"7"DeltaSlewXY:3:8:"RELOFFSET%LEWORD%IMM RELOFFSET%LEWORD%IMM COUNT%LEWORD%IMM":INT|ASMV:0:NONE:"8"Repeat:0:9:"":ASMR|ASMV:0:NONE:"9"Ifexecutepgm:2:10:"CHANID%LEWORD%IMM PGMID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"10"Ifexecuterasterpgm:3:11:"CHANID%LEWORD%IMM PGMID%LEWORD%IMM PGMID%LEWORD%IMM":INT|ASMV:0:NONE:"11"Iftempokexecutepgm:2:12:"DEVICEID%LEWORD%IMM PGMID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"12"Iftempokexecuterasterpgm:3:13:"DEVICEID%LEWORD%IMM PGMID%LEWORD%IMM PGMID%LEWORD%IMM":INT|ASMV:0:NONE:"13"ExecutePgm:1:14:"PGMID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"14"ExecuteRasterPgm:2:15:"PGMID%LEWORD%IMM PGMID%LEWORD%IMM":INT|ASMV:0:NONE:"15"Wait:1:16:"DBLWORD%LEDBLWORD%IMM":INT|ASMR|ASMV:0:NONE:"16"WaitSync:1:17:"CHANID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"17"SetSync:1:18:"CHANMASK%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"18"UnSetSync:1:19:"CHANID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"19"Enable:1:20:"DEVICEID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"20"Disable:1:21:"DEVICEID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"21"End:0:22:"CRC%BEDBLWORD%IMM":ASMR|ASMV:0:NONE:"22"DeltaTweakAxis:2:23:"GAIN%LEWORD%IMM RELOFFSET%LEWORD%IMM":INT|ASMR:0:NONE:"23"DeltaTweakAxisXY:4:24:"GAIN%LEWORD%IMM RELOFFSET%LEWORD%IMM GAIN%LEWORD%IMM RELOFFSET%LEWORD%IMM":INT|ASMV:0:NONE:"24"Raster:1:25:"RASTERVAL%LEWORD%IMM":INT:0:NONE:"25"Vector:0:26:"":INT:0:NONE:"26"TweakAxis:2:27:"GAIN%LEWORD%IMM RELOFFSET%LEWORD%IMM":INT|ASMR:0:NONE:"27"TweakAxisXY:4:28:"GAIN%LEWORD%IMM RELOFFSET%LEWORD%IMM GAIN%LEWORD%IMM RELOFFSET%LEWORD%IMM":INT|ASMV:0:NONE:"28"CreateFlashPgm:2:30:"PGMTYPE%LEWORD%IMM PGMID%LEWORD%IMM":INT:0:NONE:"30"PackMemory:0:31:"":INT:0:NONE:"31"AbortPgm:0:32:"":INT|ASMV|ASMR:0:NONE:"32"CreatePgm:2:33:"PGMTYPE%LEWORD%IMM PGMID%LEWORD%IMM":INT:0:NONE:"33"ReleasePgm:1:34:"PGMID%LEWORD%IMM":INT:0:NONE:"34"ComConfig:5:35:"BAUD%LEWORD%IMM DATABITS%LEWORD%IMM STOPBITS%LEWORD%IMM PARITY%LEWORD%IMM COMTYPE%LEWORD%IMM":INT|ASMV|ASMR:0:NONE:"35"ExitPgm:0:37:"":INT|ASMV|ASMR:0:NONE:"37"?FreeFlashSpace:0:38:"":INT:4:MEMSPACE:"38"?FreeRAMSpace:0:39:"":INT:4:MEMSPACE:"39"?ID:0:41:"":INT:6:IDVAL:"41"?Position:1:42:"AXIS%LEWORD%IMM":INT:2:POSVAL:"42"?Temp:0:43:"":INT:8:TEMPVAL:"43"?TempOK:1:44:"DEVICEID%LEWORD%IMM":INT:2:BOOLEAN:"44"?OpticalCal:0:45:"":INT:64:OCALVAL:"45"SetConfigVar:2:48:"WORD%LEWORD%IMM WORD%LEWORD%IMM":INT:0:NONE:"48"SetGSS:1:48:"GSS%LEWORD%IMM":INT:0:NONE:"48,0,1"SetXPRGain:1:48:"GAIN%LEWORD%IMM":INT:0:NONE:"48,0,2"SetXPROffset:1:48:"RELOFFSET%LEWORD%IMM":INT:0:NONE:"48,0,3"SetYPRGain:1:48:"GAIN%LEWORD%IMM":INT:0:NONE:"48,0,4"SetYPROffset:1:48:"RELOFFSET%LEWORD%IMM":INT:0:NONE:"48,0,5"SetSetSyncDelay:1:48:"SYNCDELAY%LEWORD%IMM":INT:0:NONE:"48,0,6"SetUnsetSyncDelay:1:48:"SYNCDELAY%LEWORD%IMM":INT:0:NONE:"48,0,7"WaitPositionXY:2:49:"WORD%LEWORD%IMM WORD%LEWORD%IMM":INT|ASMV:0:NONE:"49"WaitPosition:1:50:"WORD%LEWORD%IMM":INT|ASMR:0:NONE:"50"SaveConfigInFlash:0:53:"":INT:0:NONE:"53"?Status:0:255:"":INT:6:ERRORVAL:"255,255,255,255,255,255,255,255,255"DelayedSetSync:1:54:"CHANMASK%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"54"DelayedUnsetSync:1:55:"CHANID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"55"NRepeat:1:56:"WORD%LEWORD%IMM":ASMR|ASMV:0:NONE:"56"?Sync:0:57:"":INT:2:SYNCVAL:"57"#?DumpDataMem:1:61:"WORD%LEWORD%IMM":INT:0:NONE:"61"TransformAxis:4:63:"ROTA%LEWORD%IMM ROTB%LEWORD%IMM ROTB%LEWORD%IMM ROTA%LEWORD%IMM":INT|ASMV:0:NONE:"63"FlipExchangeAxis:3:62:"BOOL%LEWORD%IMM BOOL%LEWORD%IMM BOOL%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"62"StartFillBuffer:0:51:"":INT|ASMV:0:NONE:"51"GetFillBuffer:0:52:"":INT|ASMV:0:NONE:"52"FillGridData:1:60:"WORD%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"60"LaserGate:2:72:"LGATE%LEWORD%IMM BOOL%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"72"DelayedLaserGate:2:73:"LGATE%LEWORD%IMM BOOL%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"73"SetFPS:1:74:"LGATE%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"74"DelayedSetFPS:1:75:"LGATE%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"75"SetTicklePulses:2:68:"TICKLEP%LEWORD%IMM TICKLEW%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"68"SetAnalogOutput:1:77:"LPOWER%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"77"SetLaserPower:1:69:"LPOWER%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"69"ExecSerialNumber:0:64:"":INT|ASMR|ASMV:0:NONE:"64"ExecBinPgm:1:76:"PGMID%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"76"SetOutputSignal:2:70:"LOUTPUTTYPE%LEWORD%IMM BOOL%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"70"DelayedSetOutputSignal:2:71:"LOUTPUTTYPE%LEWORD%IMM BOOL%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"71"SerialNumberSetup:14:65:"BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM":INT|ASMR|ASMV:0:NONE:"65"SetPWM:3:67:"QSWITCHPERIOD%LEWORD%IMM WORD%LEWORD%IMM WORD%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"67"WaitMOFdistance:1:79:"WORD%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"79"SetMOFShift:1:48:"SHIFTVAL%LEWORD%IMM":INT:0:NONE:"48,0,8"SetMOFMode:1:48:"BOOL%LEWORD%IMM":INT:0:NONE:"48,0,9"LaserModeSetup:6:66:"BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM BYTE%BYTE%IMM":INT|ASMR|ASMV:0:NONE:"66"SetMOFgains:2:78:"DYNAFIXEDPOINT%LEWORD%IMM DYNAFIXEDPOINT%LEWORD%IMM":INT|ASMR|ASMV:0:NONE:"78"#software debug commands#test number formatting#MakeByte:1:255:"BYTE%BYTE%IMM":TST:0:UNDEFINED:""#MakeLeWord:1:255:"WORD%LEWORD%IMM":TST:0:UNDEFINED:""#MakeBeWord:1:255:"WORD%BEWORD%IMM":TST:0:UNDEFINED:""#MakeLeDoubleWord:1:255:"DBLWORD%LEDBLWORD%IMM":TST:0:UNDEFINED:""#MakeBeDoubleWord:1:255:"DBLWORD%BEDBLWORD%IMM":TST:0:UNDEFINED:""    95    